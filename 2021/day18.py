from math import ceil

def redduce(fish):
    redduced = False
    while not redduced:
        exploded, fish = explode(fish)
        if exploded:
            continue

        splitted, fish = splitt(fish)
        if splitted:
            continue

        redduced = True

    return fish

def explode(pairs):
    bracket_stack = 0
    for i in range(len(pairs)):
        char = pairs[i]
        if char == "[":
            bracket_stack += 1
        elif char == "]":
            bracket_stack -= 1

        if bracket_stack > 4:
            print("explode!", pairs[i:i+5])

            for j in range(i, 0, -1):
                if type(pairs[j]) is int:
                    pairs[j] += pairs[i+1]
                    break

            for j in range(i+5, len(pairs)):
                if type(pairs[j]) is int:
                    pairs[j] += pairs[i+3]
                    break

            pairs[i:i+5] = [0]
            return True, pairs

    return False, pairs

def splitt(pairs):
    for i in range(len(pairs)):
        snail = pairs[i]
        if type(snail) is int and snail > 9:
            print("redduce~", pairs[i])
            #  [half rounded down, half rounded up]
            pairs[i:i+1] = ["[", int(snail / 2), ",", ceil(snail / 2), "]"]

            return True, pairs

    return False, pairs

def add(pair_one, pair_two):
    if not pair_one:
        return pair_two

    if not pair_two:
        return pair_one

    print("adding~", pair_one, pair_two)
    return redduce(["["] + pair_one + [","] + pair_two + ["]"])

def magnitude(pairs):
    left_stack = []

    gotta_comma = False
    for p in pairs:
        print(p, gotta_comma, left_stack)
        if p == "]":

            print('we gotta multiply')
            right = left_stack.pop()
            center = left_stack.pop() # should be a comman?
            left = left_stack.pop()
            left_stack.pop()

            print(right, center, left)
            left_stack.append(3*left + 2*right)

        else:
            left_stack.append(p)


    return left_stack.pop() if left_stack else 0


def snailfy(fish):
    snails = []
    for f in fish:
        if f.isdigit():
            snails.append(int(f))
        else:
            snails.append(f)

    return snails


assert snailfy("[9,9]") == ["[", 9, ",", 9, "]"]
assert snailfy("[9,[1,2]]") == ['[', 9, ',', '[', 1, ',', 2, ']', ']']

# explode tests:
assert explode(snailfy("[[[[[9,8],1],2],3],4]")) == (True, snailfy("[[[[0,9],2],3],4]"))
assert explode(snailfy("[7,[6,[5,[4,[3,2]]]]]")) == (True, snailfy("[7,[6,[5,[7,0]]]]"))
assert explode(snailfy("[[6,[5,[4,[3,2]]]],1]")) == (True, snailfy("[[6,[5,[7,0]]],3]"))
assert explode(snailfy("[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]")) == (True, snailfy("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]"))
assert explode(snailfy("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]")) == (True, snailfy("[[3,[2,[8,0]]],[9,[5,[7,0]]]]"))
assert explode(snailfy("[1,3]")) == (False, snailfy("[1,3]"))
print("EXPLODE COMPLETE!")

# splitt tests:
assert splitt(["[", 10, ",", 9, "]"]) == (True, snailfy("[[5,5],9]"))
assert splitt(["[", 11, ",", 9, "]"]) == (True, snailfy("[[5,6],9]"))
assert splitt(["[", 1, ",", "[", "[", 2, ",", 10, "]", ",", "[", 3, ",", 11, "]", "]", "]"]) == (True, ["[", 1, ",", "[", "[", 2, ",", "[", 5, ",", 5, "]", "]", ",", "[", 3, ",", 11, "]", "]", "]"])
print("SPLIT COMPLETE!")

assert redduce("[5,5]") == "[5,5]"
assert redduce("[1,2]") == "[1,2]"
assert redduce("[[1,2],3]") == "[[1,2],3]"
assert redduce("[[1,9],[8,5]]") == "[[1,9],[8,5]]"
assert redduce("[[[[1,2],[3,4]],[[5,6],[7,8]]],9]") == "[[[[1,2],[3,4]],[[5,6],[7,8]]],9]"
assert redduce("[[[9,[3,8]],[[0,9],6]],[[[3,7],[4,9]],3]]") == "[[[9,[3,8]],[[0,9],6]],[[[3,7],[4,9]],3]]"
assert redduce("[[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]]") == "[[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]]"
assert redduce(snailfy("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]")) == snailfy("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")

print("redduce COMPLETE!")

assert magnitude(snailfy("[9,1]")) == 29
assert magnitude(snailfy("[1,9]")) == 21
assert magnitude(snailfy("[[9,1],[1,9]]")) == 129
assert magnitude(snailfy("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")) == 1384
assert magnitude(snailfy("[[[[1,1],[2,2]],[3,3]],[4,4]]")) == 445
assert magnitude(snailfy("[[[[3,0],[5,3]],[4,4]],[5,5]]")) == 791
assert magnitude(snailfy("[[[[5,0],[7,4]],[5,5]],[6,6]]")) == 1137
assert magnitude(snailfy("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]")) == 3488

print("magnitude COMPLETE!~")

# add tests
assert add(snailfy("[9,9]"), snailfy("[1,1]")) == snailfy("[[9,9],[1,1]]")
assert add(snailfy("[[[[4,3],4],4],[7,[[8,4],9]]]"), snailfy("[1,1]")) == snailfy("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]")
print("add COMPLETE!")

test = """[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]""".split('\n')

print()
print()
print("~~~~~ THE TEST ~~~~~")
summed = []
for a in test:
    print(summed, a)
    summed = add(summed, snailfy(a))

assert summed == snailfy("[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]")
assert magnitude(summed) == 4140
print("assignment COMPLETE ~~~~~")

assignment = """[4,[3,[9,[9,0]]]]
[[[7,6],[2,[2,5]]],[5,[[7,3],8]]]
[4,[4,6]]
[[0,[5,6]],[[[1,3],[2,7]],[[0,6],4]]]
[6,[[3,[6,0]],3]]
[[7,[9,[8,5]]],[6,7]]
[[[[2,6],1],2],[3,[8,4]]]
[4,[[[5,4],[2,7]],[[8,0],[2,3]]]]
[[[[4,3],2],[[3,6],[2,5]]],[[[3,7],8],0]]
[[[8,[0,7]],1],[[9,[3,9]],9]]
[[[[3,0],[1,3]],[[0,9],8]],[[[7,2],9],[[1,4],[3,5]]]]
[[[[9,6],[4,4]],[1,3]],[[4,3],[[6,4],[8,4]]]]
[[[1,2],[[7,6],[2,3]]],[[4,6],[4,2]]]
[[[4,8],[[5,8],1]],[2,3]]
[[[5,2],[3,[5,7]]],[[2,9],5]]
[[[6,[3,2]],[2,6]],[[8,[4,2]],[[5,2],7]]]
[[[[2,6],[0,1]],[7,[3,6]]],[[1,6],[[7,9],0]]]
[[[0,3],[8,1]],[[[9,0],3],[0,2]]]
[[8,[[7,1],[4,7]]],[[0,[1,3]],[8,2]]]
[[[[2,3],4],[[0,8],[9,0]]],[1,[[5,3],4]]]
[[[[7,2],2],[[1,3],[8,3]]],[4,[[7,9],[0,6]]]]
[[[[2,2],[3,4]],[[1,5],[4,3]]],[6,[[7,2],1]]]
[1,[[[5,7],0],[9,[8,8]]]]
[[[[9,2],[0,9]],[4,[7,8]]],[[4,8],[[1,8],[4,9]]]]
[[[[4,7],2],2],4]
[1,[[2,[4,2]],1]]
[[[[7,2],[3,8]],[0,[1,3]]],[[[4,4],[2,4]],[8,2]]]
[[[[1,0],[0,5]],2],[[9,[5,0]],[[1,6],5]]]
[4,[[[8,1],[1,4]],[7,[1,3]]]]
[[[6,[0,4]],[[4,6],[2,4]]],[9,[1,5]]]
[[[[3,6],[3,3]],1],[0,[[8,8],2]]]
[[7,[5,[2,6]]],[[[7,9],6],[0,[3,6]]]]
[[[[6,7],4],[[2,9],2]],3]
[[[7,[1,7]],[5,4]],[[[1,1],[0,1]],5]]
[[6,[[1,0],6]],[0,[6,[0,5]]]]
[[[[2,4],[4,6]],9],[4,[[8,0],7]]]
[[[[9,9],[5,7]],[9,[8,6]]],[[3,[2,3]],0]]
[[0,[1,[5,3]]],[3,[8,[3,4]]]]
[[[[4,3],8],[2,9]],[[1,[6,5]],[[5,7],2]]]
[[[0,[7,4]],[9,[9,6]]],[[8,[5,5]],[[6,4],1]]]
[[[[7,3],[7,9]],[8,[6,2]]],[[8,[4,5]],[[6,4],[6,7]]]]
[[7,[[9,0],[9,0]]],[[[0,8],2],[8,[8,3]]]]
[4,[7,[5,6]]]
[7,[[[3,8],8],3]]
[[[4,[6,6]],0],[9,0]]
[[[[7,4],8],8],[[0,1],[[0,0],[2,4]]]]
[7,[1,[[9,4],[3,6]]]]
[[[[2,8],9],[[8,6],[2,2]]],[[[5,1],9],[2,[0,7]]]]
[8,7]
[[[[0,8],4],[[9,9],[9,9]]],[[[4,3],[1,0]],[6,8]]]
[[[[8,3],[8,9]],1],[[4,[1,0]],[[4,0],[2,3]]]]
[[[[4,7],[1,3]],[6,9]],[[1,0],[[1,8],5]]]
[[2,[4,[6,5]]],[3,[[9,9],5]]]
[[[[7,6],4],9],[8,[4,5]]]
[[[0,[6,6]],[7,[8,9]]],[[[0,0],[3,4]],[4,[1,8]]]]
[[[9,[7,0]],[5,8]],[6,[[5,0],[0,6]]]]
[[[[4,0],[1,9]],[7,[3,6]]],[[2,[8,6]],[[2,8],[8,2]]]]
[[[9,6],8],[[[5,5],[4,8]],0]]
[[[[1,7],1],2],[[[6,8],3],[[3,3],5]]]
[3,[5,[[3,8],6]]]
[3,[[[9,6],[5,8]],[9,2]]]
[[6,1],[6,4]]
[[2,6],[[[1,2],2],8]]
[[[[1,7],[3,6]],[2,[0,2]]],[[3,0],9]]
[1,[[0,[4,9]],5]]
[[[[5,5],[5,2]],[0,[6,4]]],8]
[0,[7,[[6,9],[6,0]]]]
[[[[2,2],[4,7]],[[7,4],6]],[[0,[1,7]],[[3,2],6]]]
[[9,8],0]
[[[[5,4],[4,8]],2],[3,[8,9]]]
[[[[7,0],8],5],[2,6]]
[[[5,[0,8]],5],[[[5,0],[1,8]],[[0,2],7]]]
[[[[9,4],8],[[6,5],4]],[[5,[8,9]],[4,[0,4]]]]
[[[[3,6],7],[[9,3],7]],[7,[[8,3],9]]]
[[[[0,7],5],[[5,7],2]],[[2,[9,5]],[[7,7],[5,0]]]]
[[[[7,5],2],[8,6]],[[2,[6,2]],[5,[3,1]]]]
[[9,[9,1]],6]
[[[0,7],[[5,9],2]],3]
[[[9,3],[8,8]],[0,[4,5]]]
[[[[6,2],5],[4,[3,1]]],[9,[2,8]]]
[[[1,[9,4]],[[0,0],2]],[[1,[2,1]],[[7,8],[3,2]]]]
[[[[0,6],[8,9]],[[4,7],[5,6]]],[[[1,4],[8,7]],[4,6]]]
[[[[6,4],[1,5]],[0,8]],[[[9,7],[1,2]],[9,4]]]
[[[[4,5],[0,7]],[9,[1,8]]],[[[5,0],6],7]]
[[[0,[6,9]],[5,[5,6]]],7]
[[4,5],[[7,[6,5]],1]]
[[[7,9],[6,7]],[4,1]]
[[[[9,6],1],[[3,1],[9,7]]],[1,[7,1]]]
[[[0,[2,0]],5],[[8,[7,6]],[[7,3],4]]]
[[[6,[1,7]],[9,[2,7]]],3]
[[[6,[8,2]],5],[4,[[1,3],[5,1]]]]
[[[4,[3,3]],[4,[2,4]]],[5,4]]
[[[1,6],[4,[4,0]]],[[8,[2,2]],[[8,1],[4,7]]]]
[[2,0],[[2,1],[[4,8],[2,7]]]]
[9,[[8,4],0]]
[[1,6],[[5,[1,3]],[9,[0,9]]]]
[[[0,[3,5]],3],[[2,[8,0]],[[2,0],[4,3]]]]
[[[1,[1,9]],[9,[7,9]]],[[2,2],[[6,7],[0,7]]]]
[[[4,6],[[6,2],[0,9]]],[[1,0],[1,[6,7]]]]
[9,[[[0,1],4],[[9,3],3]]]""".split('\n')

print()
print()
print("~~~~~ THE ASSIGNMENT ~~~~~")
summed = []
for a in assignment:
    print(summed, a)
    summed = add(summed, snailfy(a))

print(magnitude(summed))
print("assignment COMPLETE ~~~~~")

maximum = 0
for a in assignment:
    a = snailfy(a)

    for b in assignment:
        if a == b:
            continue

        b = snailfy(b)

        sum = add(a, b)
        mag = magnitude(sum)

        if mag > maximum:
            maximum = mag
            print(a)
            print(b)
            print(maximum)

print(maximum)
